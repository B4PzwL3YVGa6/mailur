<!DOCTYPE html>
<html>
<head>
  <title>Mailur</title>
</head>
<body>
  <script src="https://vuejs.org/js/vue.min.js"></script>
  <script src="https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js"></script>
  <div id="app">
    <input v-model.lazy.trim="query" @keyup.enter="get()">
    <input type="checkbox" id="show_bodies" v-model="show_bodies">
    <label for="show_bodies">bodies</label>
    <input type="checkbox" id="show_threads" v-model="show_threads">
    <label for="show_threads">treads</label>
    <button v-on:click="get()">go!</button>
    <div v-for="uid in uids">
      <a :href="parsed_url(uid)" target="_blank" title="Parsed message" >{{ uid }}</a>
      <span v-if="state[uid]">
      <a :href="origin_url(uid)" target="_blank" title="Origin message">[orig]</a>
      <i>{{ msgs[uid].flags }}</i>
      <b v-on:click.stop="search_header('x-subject', msgs[uid].subject)">
        {{ msgs[uid].subject }}
      </b>
      <div style="border-bottom: 1px solid #ccc">
        <span>{{ msgs[uid].date }}</span>
        <span v-on:click.stop="search_header('message-id ', msgs[uid].message_id)">
            {{ msgs[uid].message_id }}
        </span>
      </div>
      <div v-if="show_bodies" v-html="msgs[uid].body"></div>
      </span>
    </div>
  </div>

  <script>
  var app = new Vue({
    el: '#app',
    data: {
      uids: [],
      state: {},
      query: decodeURIComponent(location.hash.slice(1))  || 'all',
      show_threads: false,
      show_bodies: false,
    },
    methods: {
      get: function(query) {
        if (query) {
            app.query = query;
        }
        window.location.hash = app.query;
        send(app.show_threads ? 'threads' : 'emails', {q: app.query});
      },
      origin_url: function(uid) {
        return '/origin/' + this.msgs[uid].uid;
      },
      parsed_url: function(uid) {
        return '/parsed/' + uid;
      },
      search: function(query) {
        query = app.show_threads && query || 'inthread refs ' + query;
        return app.get(query);
      },
      search_header: function(name, value) {
        return app.search('header ' + name + ' "' + value + '"');
      },
    }
  });
  app.msgs = {};
  var ws = new WebSocket('ws://' + location.host);
  ws.binaryType = 'arraybuffer';
  ws.onopen = function(event) {
    send('ping');
  }
  ws.onmessage = function(event) {
    console.log('ws:' + event.data);
    var data = msgpack.decode(new Uint8Array(event.data));
    var target = requests[data.uid];
    if (target != 'ping') {
      if (data.body.msgs) {
        msgs = data.body.msgs;
        Object.assign(app.msgs, msgs);
        for (var msg in msgs) {
          app.state[msg] = 1;
        }
      } else {
        app.uids = data.body;
        app.state = app.uids.reduce(function(acc, cur, i) {
          acc[cur] = 0;
          return acc;
        }, {});
      }
    }
  }
  ws.onclose = function(event) {
    console.log('ws:closed');
  }
  var requests = {};
  function send(target, params) {
    var uid = uuidv4();
    requests[uid] = target;
    var msg = msgpack.encode({target: target, params: params || {}, uid: uid});
    ws.send(msg)
  }
  function uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  </script>
</body>
</html>
