<!DOCTYPE html>
<html>
<head>
  <title>Mailur</title>
</head>
<body>
  <script src="https://vuejs.org/js/vue.js"></script>
  <div id="app">
    <input v-model.lazy.trim="query" @keyup.enter="get()">
    <input type="checkbox" id="show_bodies" v-model="show_bodies">
    <label for="show_bodies">bodies</label>
    <input type="checkbox" id="show_threads" v-model="show_threads">
    <label for="show_threads">treads</label>
    <button v-on:click="get()">go!</button>
    <div v-for="uid in uidsLoaded" :key="uid">
      <a :href="parsed_url(uid)" target="_blank" title="Parsed message" >{{ uid }}</a>
      <template v-if="state[uid]">
      <a :href="origin_url(uid)" target="_blank" title="Origin message">[orig]</a>
      <i>{{ msgs[uid].flags }}</i>
      <b v-on:click.stop="search_header('x-subject', msgs[uid].subject)">
        {{ msgs[uid].subject }}
      </b>
      <div style="border-bottom: 1px solid #ccc">
        <span>{{ msgs[uid].date }}</span>
        <span v-on:click.stop="search_header('message-id ', msgs[uid].message_id)">
            {{ msgs[uid].message_id }}
        </span>
      </div>
      <div v-if="show_bodies" v-html="msgs[uid].body"></div>
      </template>
    </div>
    <a v-on:click.prevent="loadMore()" href="#" v-if="canLoadMore()">Load more...</a>
  </div>

  <script>
  var app = new Vue({
    el: '#app',
    data: {
      uids: [],
      state: {},
      query: decodeURIComponent(location.hash.slice(1))  || 'all',
      show_threads: false,
      show_bodies: false,
      per_page: 100,
    },
    computed: {
      uidsLoaded: function() {
        var uids = [];
        for (var uid of this.uids) {
          if (this.state[uid]) {
            uids.push(uid);
          }
        }
        return uids;
      }
    },
    methods: {
      get: function(query) {
        if (query) {
            this.query = query;
        }
        window.location.hash = this.query;
        this.send('', {q: this.query, preload: this.per_page}).then(res => {
          this.msgs = res.msgs;

          this.ids(res.uids.slice(0, this.per_page));
          this.infos(res.msgs);
          if (res.uids.length > this.per_page) {
            setTimeout(() => this.ids(res.uids), 0);
          }
        });
      },
      canLoadMore() {
        return Object.getOwnPropertyNames(this.msgs || {}).length < this.uids.length;
      },
      loadMore: function() {
        var start = Object.getOwnPropertyNames(this.msgs).length,
            uids = this.uids.slice(start, start + this.per_page);
        this.send('/info', {uids: uids}).then(this.infos);
      },
      ids: function(uids) {
        this.uids = uids;
        var state = this.uids.reduce((acc, cur) => {
          acc[cur] = this.msgs && this.msgs[cur] ? 1 : 0;
          return acc;
        }, {});
        this.state = state;
      },
      infos: function(msgs) {
        this.msgs = Object.assign(this.msgs, msgs);
        var state = {};
        for (var msg in msgs) {
          state[msg] = 1;
        }
        this.state = Object.assign(this.state, state);
      },
      url: function(url, params) {
        url = (this.show_threads ? '/threads' : '/msgs') + url;
        return params && url + encodeURIComponent(this.query) || url;

      },
      send: function(url, params, callback) {
        url = this.url(url);
        return fetch(url, {
          method: 'post',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(params)
        }).then(response => response.json());
      },
      origin_url: function(uid) {
        return '/origin/' + this.msgs[uid].uid;
      },
      parsed_url: function(uid) {
        return '/parsed/' + uid;
      },
      search: function(query) {
        query = app.show_threads && query || 'inthread refs ' + query;
        return app.get(query);
      },
      search_header: function(name, value) {
        return app.search('header ' + name + ' "' + value + '"');
      },
    }
  });
  app.msgs = {};
  </script>
</body>
</html>
